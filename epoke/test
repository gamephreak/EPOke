#!/usr/bin/env node
'use strict';

try {
  require('source-map-support').install();
} catch (err) {
  if (err.code !== 'MODULE_NOT_FOUND') throw err;
}

const diff = require('json-diff');

const {Dex, TeamValidator, RandomPlayerAI, BattleStreams, PRNG} = require('@pkmn/sim');
const {Battle} = require('@pkmn/client');

const {Generations} = require('@pkmn/data');

const prng = new PRNG();
const seed = prng.seed;
const formatid = 'gen4ou'; // TODO
const validator = new TeamValidator(formatid, Dex);
// TODO: alternatively, pull teams from a team DB...
const teamA = dex.packTeam(predictor.generateTeam(formatid, prng, validator));
const teamB = dex.packTeam(predictor.generateTeam(formatid, prng, validator));

const battleStream = new BattleStreams.BattleStream();
const streams = BattleStreams.getPlayerStreams(battleStream);

const p1 = new RandomPlayerAI(streams.p1);
const p2 = new RandomPlayerAI(streams.p2);

void p1.start();
void p2.start();

const gens = new Generations(Dex);
const battle = new Battle(gens);

void (async () => {
  for await (const chunk of streams.omniscient) {
    battle.add(chunk);
    // diff.diffString(battle.toJSON(), battleStream.battle);
  }
})();

void streams.omniscient.write(`>start ${JSON.stringify({formatid})}
>player p1 ${JSON.stringify({name: 'Player A', team: teamA})}
>player p2 ${JSON.stringify({name: 'Player B', team: teamB})}`);